<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.industry.mapper.UserMapper">

    <resultMap id="queryUserByUsernameResultMap" type="com.industry.auth.AuthUser">
        <id column="user_id" property="userId" jdbcType="TINYINT"/>
        <result column="is_enabled" property="enabled" jdbcType="TINYINT"/>
        <result column="is_on_job" property="onJob" jdbcType="TINYINT"/>
        <result column="is_first_login" property="firstLogin" jdbcType="TINYINT"/>
        <collection property="listRoles" column="{userId=user_id}" select="listRolesByUserId" ofType="RoleDO"/>
        <collection property="listRoleIds" column="{userId=user_id}" select="listRoleIdsByUserId"/>
    </resultMap>

    <select id="listRolesByUserId" resultType="RoleDO" resultMap="listRolesByUsernameMap">
        select role_id,
               role_name,
               is_enabled,
               data_permission
        from construction_industry_api.t_role
        where role_id in (
            select role_id
            from construction_industry_api.t_user_role
            where user_id = #{userId}
        )
          and is_enabled = 1
    </select>

    <select id="listRoleIdsByUserId" resultType="Integer">
        select role_id
        from construction_industry_api.t_role
        where role_id in (
            select role_id
            from construction_industry_api.t_user_role
            where user_id = #{userId}
        )
          and is_enabled = 1
    </select>

    <resultMap id="listRolesByUsernameMap" type="RoleDO">
        <id column="role_id" property="roleId"/>
        <result column="is_enabled" property="enabled" jdbcType="TINYINT"/>
    </resultMap>

    <select id="listRolesByUsername" resultType="RoleDO" resultMap="listRolesByUsernameMap">
        select role_id,
               gmt_create,
               gmt_modified,
               creator_id,
               regenerator_id,
               role_name,
               is_enabled,
               data_permission,
               description
        from construction_industry_api.t_role
        where role_id in (
            select role_id
            from construction_industry_api.t_user_role
            where user_id = (
                select user_id
                from construction_industry_api.t_user
                where username = #{username}
            )
        )
          and is_enabled = 1
    </select>

    <insert id="insertUser" parameterType="com.industry.auth.AuthUser" useGeneratedKeys="true" keyProperty="userId">
        insert into construction_industry_api.t_user(mechanism_id, gmt_create, gmt_modified, creator_id,
                                                     regenerator_id, username, password, full_name,
                                                     telephone_number, sex, age, is_on_job)
        values (#{mechanismId},
                #{gmtCreate},
                #{gmtModified},
                #{creatorId},
                #{regeneratorId},
                #{username},
                #{password},
                #{fullName},
                #{telephoneNumber},
                #{sex},
                #{age},
                #{onJob})
    </insert>
    <update id="updateUserById">
        update construction_industry_api.t_user
        set full_name        = #{fullName},
            mechanism_id     = #{mechanismId},
            is_on_job        = #{onJob},
            sex              = #{sex},
            age              = #{sex},
            telephone_number = #{telephoneNumber},
            gmt_modified     = #{gmtModified},
            regenerator_id   = #{regeneratorId}
        where user_id = #{userId}
    </update>
    <update id="resetPassword">
        update construction_industry_api.t_user
        set password = #{password}
        where user_id = #{id}
    </update>
    <update id="modifyPassword">
        update construction_industry_api.t_user
        set password = #{request.newPassword}
        where user_id = #{request.id}
    </update>

    <delete id="removeByRoleIds">
        delete from construction_industry_api.t_user_role
        where role_id in
        <foreach collection="list" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
        and user_id = #{userId}
    </delete>

    <delete id="deleteByUserId">
        delete
        from construction_industry_api.t_user
        where user_id = #{id}
    </delete>

    <select id="queryUserByUsername" resultMap="queryUserByUsernameResultMap" resultType="com.industry.auth.AuthUser">
        select user_id,
               mechanism_id,
               gmt_create,
               gmt_modified,
               creator_id,
               regenerator_id,
               is_enabled,
               username,
               password,
               full_name,
               telephone_number,
               sex,
               age,
               is_on_job,
               is_first_login
        from construction_industry_api.t_user
        where username = #{username}
    </select>
    <resultMap id="listUsersMap" type="SelectOptions">
        <result column="user_id" property="value"/>
        <result column="full_name" property="label"/>
    </resultMap>
    <select id="listUsers" resultMap="listUsersMap" resultType="SelectOptions">
        select user_id,
               full_name
        from construction_industry_api.t_user
    </select>

    <resultMap id="listAllUsersMap" type="com.industry.auth.AuthUser">
        <id column="user_id" property="userId"/>
        <id column="mechanism_id" property="mechanismId"/>
        <result column="is_enabled" property="enabled"/>
        <result column="is_on_job" property="onJob"/>
        <result column="is_first_login" property="firstLogin"/>
        <association property="mechanism" select="selectMechanismName" column="mechanism_id"/>
    </resultMap>

    <select id="selectMechanismName" resultType="MechanismDO">
        select mechanism_id,
               mechanism_name
        from construction_industry_api.t_mechanism
        where mechanism_id = #{mechanism_id}
    </select>

    <select id="listAllUsers" resultType="com.industry.auth.AuthUser" resultMap="listAllUsersMap">
        select user_id,
               mechanism_id,
               gmt_create,
               gmt_modified,
               creator_id,
               regenerator_id,
               is_enabled,
               username,
               full_name,
               telephone_number,
               sex,
               age,
               is_on_job,
               is_first_login
        from construction_industry_api.t_user
        order by user_id desc
        limit #{page.currentPage},#{page.pageSize}
    </select>
    <select id="getCount" resultType="Long">
        select count(*)
        from construction_industry_api.t_user
    </select>
    <select id="listUsersByMechanismIds" resultMap="listAllUsersMap" resultType="com.industry.auth.AuthUser">
        select user_id,
        mechanism_id,
        gmt_create,
        gmt_modified,
        creator_id,
        regenerator_id,
        is_enabled,
        username,
        full_name,
        telephone_number,
        sex,
        age,
        is_on_job,
        is_first_login
        from construction_industry_api.t_user
        where mechanism_id in
        <foreach collection="mechanismIds" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
        <bind name="fullName" value="'%'+fullName+'%'"/>
        and full_name like #{fullName}
        <if test="onJob != null">
            and is_on_job = #{onJob}
        </if>
        order by user_id desc
        limit #{page.currentPage},#{page.pageSize}
    </select>

    <select id="selectMechanismIds" resultType="Integer">
        select m1.mechanism_id
        from (select * from construction_industry_api.t_mechanism where parent_id is not null) m1,
             (select @pid := #{mechanismId}) pd
        where find_in_set(parent_id, @pid) > 0
                  and @pid := concat(@pid, ',', mechanism_id)
        union
        select mechanism_id
        from construction_industry_api.t_mechanism
        where mechanism_id = #{mechanismId}
    </select>

    <select id="getCountByMechanismId" resultType="Long">
        select count(*)
        from construction_industry_api.t_user
        where mechanism_id in (
        select m1.mechanism_id
        from (select * from construction_industry_api.t_mechanism where parent_id is not null) m1,
        (select @pid := #{mechanismId}) pd
        where find_in_set(parent_id, @pid) > 0
        and @pid := concat(@pid, ',', mechanism_id)
        union
        select mechanism_id
        from construction_industry_api.t_mechanism
        where mechanism_id = #{mechanismId}
        )
        <bind name="fullName" value="'%'+fullName+'%'"/>
        and full_name like #{fullName}
        <if test="onJob != null">
            and is_on_job = #{onJob}
        </if>
    </select>

    <resultMap id="getDetailById" type="com.industry.auth.AuthUser">
        <id column="user_id" property="userId"/>
        <result column="mechanism_id" property="mechanismId"/>
        <result column="is_enabled" property="enabled" jdbcType="TINYINT"/>
        <result column="is_on_job" property="onJob" jdbcType="TINYINT"/>
        <result column="is_first_login" property="firstLogin" jdbcType="TINYINT"/>
        <association property="mechanism" select="selectMechanismName" column="mechanism_id"/>
        <collection property="listRoleIds" select="selectRoleIds" column="user_id"/>
        <collection property="listRoles" select="selectRoles" ofType="RoleDO" column="user_id"/>
    </resultMap>

    <select id="selectRoleIds" resultType="Integer">
        select tr.role_id
        from construction_industry_api.t_user_role tur
                 left join construction_industry_api.t_user tu on tur.user_id = tu.user_id
                 left join construction_industry_api.t_role tr on tr.role_id = tur.role_id
        where tu.user_id = #{user_id}
    </select>

    <select id="selectRoles" resultType="RoleDO">
        select tr.role_id,
               tr.role_id,
               tr.role_name
        from construction_industry_api.t_user_role tur
                 left join construction_industry_api.t_user tu on tur.user_id = tu.user_id
                 left join construction_industry_api.t_role tr on tr.role_id = tur.role_id
        where tu.user_id = #{user_id}
    </select>

    <select id="getDetailById" resultType="com.industry.auth.AuthUser" resultMap="getDetailById">
        select user_id,
               mechanism_id,
               gmt_create,
               gmt_modified,
               creator_id,
               regenerator_id,
               is_enabled,
               username,
               full_name,
               telephone_number,
               sex,
               age,
               is_on_job,
               is_first_login
        from construction_industry_api.t_user
        where user_id = #{id}
    </select>
    <select id="getListRoleIds" resultType="Integer">
        select role_id
        from construction_industry_api.t_user_role
        where user_id = #{userId}
    </select>
    <select id="selectByUserId" resultType="com.industry.auth.AuthUser">
        select user_id,
               mechanism_id,
               password
        from construction_industry_api.t_user
        where user_id = #{id}
    </select>
    <select id="getAuthorityByUsername" resultType="PermissionDO">
        select distinct (permission_uri),
                        tp.permission_id,
                        tp.gmt_create,
                        tp.gmt_modified,
                        tp.creator_id,
                        tp.regenerator_id,
                        tp.permission_name,
                        tp.is_enabled,
                        tp.parent_id
        from construction_industry_api.t_permission as tp
                 left join construction_industry_api.t_role_permission as trp on tp.permission_id = trp.permission_id
        where trp.permission_id in (
            select permission_id
            from construction_industry_api.t_role_permission
            where role_id in (
                select role_id
                from construction_industry_api.t_user_role
                where user_id = (
                    select user_id
                    from construction_industry_api.t_user
                    where username = #{username}
                )
            )
              and is_enabled = 1
        )
    </select>
    <select id="getAuthorityURIByUsername" resultType="String">
        select distinct (permission_uri)
        from construction_industry_api.t_permission as tp
                 left join construction_industry_api.t_role_permission as trp on tp.permission_id = trp.permission_id
        where trp.permission_id in (
            select permission_id
            from construction_industry_api.t_role_permission
            where role_id in (
                select role_id
                from construction_industry_api.t_user_role
                where user_id = (
                    select user_id
                    from construction_industry_api.t_user
                    where username = #{username}
                )
            )
              and is_enabled = 1
        )
    </select>
    <select id="getByMechanismById" resultType="String">
        select mechanism_name
        from construction_industry_api.t_mechanism
        where mechanism_id = #{id}
    </select>
    <select id="getMechanismByUsername" resultType="String">
        select tm.mechanism_name
        from construction_industry_api.t_user as tu
                 left join construction_industry_api.t_mechanism as tm on tm.mechanism_id = tu.mechanism_id
        where username = #{username}
    </select>
    <select id="getUserIdByUsername" resultType="Integer">
        select user_id
        from construction_industry_api.t_user
        where username = #{username}
    </select>


</mapper>
