<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.industry.mapper.EnterpriseMapper">

    <insert id="insert" parameterType="EnterpriseDO" useGeneratedKeys="true" keyProperty="id">
        insert into construction_industry_api.t_enterprise
        ( enterprise_name
        , enterprise_qualifications
        , area
        , contact_address
        , contacts
        , sex
        , telephone_number
        , qq_number
        , enterprise_status
        , creator_id
        , gmt_create
        , regenerator_id
        , gmt_modified
        , remark)
        values ( #{enterpriseName}
               , #{enterpriseQualifications}
               , #{area}
               , #{contactAddress}
               , #{contacts}
               , #{sex}
               , #{telephoneNumber}
               , #{qqNumber}
               , #{enterpriseStatus}
               , #{creatorId}
               , #{gmtCreate}
               , #{regeneratorId}
               , #{gmtModified}
               , #{remark})
    </insert>
    <update id="updateEnterpriseStatus">
        update construction_industry_api.t_enterprise
        set enterprise_status = 2
        where id = #{enterpriseId}
    </update>


    <resultMap id="listEnterprisesMap" type="EnterpriseDO">
        <id column="id" property="id"/>
        <collection property="listEnterpriseDemands"
                    ofType="EnterpriseDemandDO"
                    column="enterprise_id"
                    select="selectEnterpriseDemand">
            <!--            <id column="id2" property="id"/>-->
            <!--            <result column="gmt_create2" property="gmtCreate"/>-->
            <!--            <result column="creator_id2" property="creatorId"/>-->
            <!--            <result column="regenerator_id2" property="regeneratorId"/>-->
            <!--            <result column="gmt_modified2" property="gmtModified"/>-->
        </collection>
    </resultMap>
    <select id="listEnterprises" resultMap="listEnterprisesMap" resultType="EnterpriseDO">
        select t1.id
             , t1.enterprise_name
             , t1.enterprise_qualifications
             , t1.area
             , t1.contact_address
             , t1.contacts
             , t1.sex
             , t1.telephone_number
             , t1.qq_number
             , t1.enterprise_status
             , t1.creator_id
             , t1.gmt_create
             , t1.regenerator_id
             , t1.gmt_modified
             , t1.remark
             , t2.id             as id2
             , t2.enterprise_id
             , t2.class_three_personnel
             , t2.tender_exit
             , t2.demand_number
             , t2.enterprise_offer
             , t2.enterprise_offer_number
             , t2.enterprise_offer_unit
             , t2.market_development_fee
             , t2.market_development_fee_unit
             , t2.title
             , t2.education
             , t2.level_major_initial_conversion
             , t2.gmt_create     as gmt_create2
             , t2.creator_id     as creator_id2
             , t2.regenerator_id as regenerator_id2
             , t2.gmt_modified   as gmt_modified2
        from construction_industry_api.t_enterprise as t1
                 left join construction_industry_api.t_enterprise_demand as t2
                           on t1.id = t2.enterprise_id
        order by t1.id desc
    </select>
    <select id="getEnterpriseById" resultMap="listEnterprisesMap" resultType="EnterpriseDO">
        select t1.id
             , t1.enterprise_name
             , t1.enterprise_qualifications
             , t1.area
             , t1.contact_address
             , t1.contacts
             , t1.sex
             , t1.telephone_number
             , t1.qq_number
             , t1.enterprise_status
             , t1.creator_id
             , t1.gmt_create
             , t1.regenerator_id
             , t1.gmt_modified
             , t1.remark
             , t2.id             as id2
             , t2.enterprise_id
             , t2.class_three_personnel
             , t2.tender_exit
             , t2.demand_number
             , t2.enterprise_offer
             , t2.enterprise_offer_number
             , t2.enterprise_offer_unit
             , t2.market_development_fee
             , t2.market_development_fee_unit
             , t2.title
             , t2.education
             , t2.level_major_initial_conversion
             , t2.gmt_create     as gmt_create2
             , t2.creator_id     as creator_id2
             , t2.regenerator_id as regenerator_id2
             , t2.gmt_modified   as gmt_modified2
        from construction_industry_api.t_enterprise as t1
                 left join construction_industry_api.t_enterprise_demand as t2
                           on t1.id = t2.enterprise_id
        where t1.id = #{id}
        group by t1.id
    </select>
    <select id="selectEnterpriseDemand" resultType="EnterpriseDemandDO">
        select id,
               enterprise_id,
               class_three_personnel,
               tender_exit,
               demand_number,
               enterprise_offer,
               enterprise_offer_number,
               enterprise_offer_unit,
               market_development_fee,
               market_development_fee_unit,
               title,
               education,
               level_major_initial_conversion,
               gmt_create,
               creator_id,
               regenerator_id,
               gmt_modified
        from construction_industry_api.t_enterprise_demand
        where enterprise_id = #{enterprise_id}
    </select>
    <select id="getEnterpriseDemandsById" resultType="EnterpriseDemandDO">
        select id,
               enterprise_id,
               class_three_personnel,
               tender_exit,
               demand_number,
               enterprise_offer,
               enterprise_offer_number,
               enterprise_offer_unit,
               market_development_fee,
               market_development_fee_unit,
               title,
               education,
               level_major_initial_conversion,
               gmt_create,
               creator_id,
               regenerator_id,
               gmt_modified
        from construction_industry_api.t_enterprise_demand
        where enterprise_id = #{id}
    </select>
    <select id="listEnterprisesByConditionPages" resultType="EnterpriseDO" resultMap="listEnterprisesMap">
        select
        t1.id,
        t1.enterprise_name,
        t1.enterprise_qualifications,
        t1.area,
        t1.contact_address,
        t1.contacts,
        t1.sex,
        t1.telephone_number,
        t1.qq_number,
        t1.enterprise_status,
        t1.creator_id,
        t1.gmt_create,
        t1.regenerator_id,
        t1.gmt_modified,
        t1.remark,
        t2.id as id2
        , t2.enterprise_id
        , t2.class_three_personnel
        , t2.tender_exit
        , t2.demand_number
        , t2.enterprise_offer
        , t2.enterprise_offer_number
        , t2.enterprise_offer_unit
        , t2.market_development_fee
        , t2.market_development_fee_unit
        , t2.title
        , t2.education
        , t2.level_major_initial_conversion
        , t2.gmt_create as gmt_create2
        , t2.creator_id as creator_id2
        , t2.regenerator_id as regenerator_id2
        , t2.gmt_modified as gmt_modified2
        from t_enterprise as t1
        left join t_enterprise_demand as t2
        on t1.id = t2.enterprise_id
        where 1 = 1
        <if test="search.enterpriseName != null and search.enterpriseName != ''">
            and t1.enterprise_name like concat('%',#{search.enterpriseName},'%')
        </if>
        <if test="search.initialConversion != null or search.levelMajor != '' or search.levelMajor != null">
            and t1.id in (
            select distinct (enterprise_id)
            from t_enterprise_demand
            where 1 = 1
            <bind name="search.levelMajor" value="search.levelMajor"/>
            <if test="search.levelMajor != null and search.levelMajor != ''">
                and json_contains(t2.level_major_initial_conversion -&gt;&gt;
                '$[*].levelMajor',json_array(#{search.levelMajor}),'$')
            </if>
            <bind name="search.initialConversion" value="search.initialConversion"/>
            <if test="search.initialConversion != null">
                and
                json_contains(t2.level_major_initial_conversion -&gt;&gt;
                '$[*].initialConversion',json_array(#{search.initialConversion}), '$')
            </if>
            )
        </if>
        <bind name="search.enterpriseStatus" value="search.enterpriseStatus"/>
        <if test="search.enterpriseStatus != null">
            and t1.enterprise_status = #{search.enterpriseStatus}
        </if>
        <bind name="search.creatorId" value="search.creatorId"/>
        <if test="search.creatorId != null">
            and t1.creator_id = #{search.creatorId}
        </if>
        <bind name="search.startDate" value="search.startDate"/>
        <if test="search.startDate != null and search.startDate != ''">
            and t1.gmt_create &gt;= #{search.startDate}
        </if>
        <bind name="search.endDate" value="search.endDate"/>
        <if test="search.endDate != null and search.endDate != ''">
            and t1.gmt_create &lt;= #{search.endDate}
        </if>
        <bind name="search.area" value="search.area"/>
        <if test="search.area != null and search.area.size() > 0">
            and t1.area in(
            <foreach collection="search.area" item="item" separator=",">
                #{item}
            </foreach>)
        </if>
        <bind name="search.deleted" value="search.deleted"/>
        <if test="search.deleted != null">
            and is_deleted = #{search.deleted}
        </if>
        group by t1.id
        order by t1.id desc
        limit #{page.currentPage},#{page.pageSize}
    </select>
    <select id="getCount" resultType="Long">
        select count(*) from (
        select t1.id
        from t_enterprise as t1
        left join t_enterprise_demand as t2
        on t1.id = t2.enterprise_id
        where 1 = 1
        <if test="search.enterpriseName != null and search.enterpriseName != ''">
            and t1.enterprise_name like concat('%',#{search.enterpriseName},'%')
        </if>
        <if test="search.initialConversion != null or search.levelMajor != '' or search.levelMajor != null">
            and t1.id in (
            select distinct (enterprise_id)
            from t_enterprise_demand
            where 1 = 1
            <bind name="search.levelMajor" value="search.levelMajor"/>
            <if test="search.levelMajor != null and search.levelMajor != ''">
                and json_contains(t2.level_major_initial_conversion -&gt;&gt;
                '$[*].levelMajor',json_array(#{search.levelMajor}),'$')
            </if>
            <bind name="search.initialConversion" value="search.initialConversion"/>
            <if test="search.initialConversion != null">
                and
                json_contains(t2.level_major_initial_conversion -&gt;&gt;
                '$[*].initialConversion',json_array(#{search.initialConversion}), '$')
            </if>
            )
        </if>
        <bind name="search.enterpriseStatus" value="search.enterpriseStatus"/>
        <if test="search.enterpriseStatus != null">
            and t1.enterprise_status = #{search.enterpriseStatus}
        </if>
        <bind name="search.creatorId" value="search.creatorId"/>
        <if test="search.creatorId != null">
            and t1.creator_id = #{search.creatorId}
        </if>
        <bind name="search.startDate" value="search.startDate"/>
        <if test="search.startDate != null and search.startDate != ''">
            and t1.gmt_create &gt;= #{search.startDate}
        </if>
        <bind name="search.endDate" value="search.endDate"/>
        <if test="search.endDate != null and search.endDate != ''">
            and t1.gmt_create &lt;= #{search.endDate}
        </if>
        <bind name="search.area" value="search.area"/>
        <if test="search.area != null and search.area.size() > 0">
            and t1.area in(
            <foreach collection="search.area" item="item" separator=",">
                #{item}
            </foreach>)
        </if>
        <bind name="search.deleted" value="search.deleted"/>
        <if test="search.deleted != null">
            and is_deleted = #{search.deleted}
        </if>
        group by t1.id
        ) as t3
    </select>

    <update id="updateDeleteStatusById">
        update construction_industry_api.t_enterprise
        set is_deleted = #{deleted}
        where id = #{id}
    </update>
</mapper>
